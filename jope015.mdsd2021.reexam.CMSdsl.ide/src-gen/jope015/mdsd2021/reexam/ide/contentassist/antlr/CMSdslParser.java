/*
 * generated by Xtext 2.22.0
 */
package jope015.mdsd2021.reexam.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import jope015.mdsd2021.reexam.ide.contentassist.antlr.internal.InternalCMSdslParser;
import jope015.mdsd2021.reexam.services.CMSdslGrammarAccess;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CMSdslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CMSdslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CMSdslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPrimaryElementAccess().getAlternatives(), "rule__PrimaryElement__Alternatives");
			builder.put(grammarAccess.getDBDeclAccess().getAlternatives(), "rule__DBDecl__Alternatives");
			builder.put(grammarAccess.getEntityDeclAccess().getAlternatives(), "rule__EntityDecl__Alternatives");
			builder.put(grammarAccess.getValidationStatusAccess().getAlternatives(), "rule__ValidationStatus__Alternatives");
			builder.put(grammarAccess.getFieldPropAccess().getAlternatives(), "rule__FieldProp__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getRelationshipTypeAccess().getAlternatives(), "rule__RelationshipType__Alternatives");
			builder.put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0(), "rule__Equality__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getPlusMinusAccess().getAlternatives_1_0(), "rule__PlusMinus__Alternatives_1_0");
			builder.put(grammarAccess.getMulDivAccess().getOpAlternatives_1_0_1_0(), "rule__MulDiv__OpAlternatives_1_0_1_0");
			builder.put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
			builder.put(grammarAccess.getAtomicAccess().getValueAlternatives_2_1_0(), "rule__Atomic__ValueAlternatives_2_1_0");
			builder.put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
			builder.put(grammarAccess.getDBConfigAccess().getGroup(), "rule__DBConfig__Group__0");
			builder.put(grammarAccess.getDBDeclAccess().getGroup_0(), "rule__DBDecl__Group_0__0");
			builder.put(grammarAccess.getDBDeclAccess().getGroup_1(), "rule__DBDecl__Group_1__0");
			builder.put(grammarAccess.getDBDeclAccess().getGroup_2(), "rule__DBDecl__Group_2__0");
			builder.put(grammarAccess.getDBDeclAccess().getGroup_3(), "rule__DBDecl__Group_3__0");
			builder.put(grammarAccess.getDBDeclAccess().getGroup_4(), "rule__DBDecl__Group_4__0");
			builder.put(grammarAccess.getDBDeclAccess().getGroup_5(), "rule__DBDecl__Group_5__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getValidationCheckAccess().getGroup(), "rule__ValidationCheck__Group__0");
			builder.put(grammarAccess.getCheckBlockAccess().getGroup(), "rule__CheckBlock__Group__0");
			builder.put(grammarAccess.getValidationStatusAccess().getGroup_0(), "rule__ValidationStatus__Group_0__0");
			builder.put(grammarAccess.getValidationStatusAccess().getGroup_1(), "rule__ValidationStatus__Group_1__0");
			builder.put(grammarAccess.getValidationStatusAccess().getGroup_2(), "rule__ValidationStatus__Group_2__0");
			builder.put(grammarAccess.getFieldPropAccess().getGroup_0(), "rule__FieldProp__Group_0__0");
			builder.put(grammarAccess.getFieldPropAccess().getGroup_1(), "rule__FieldProp__Group_1__0");
			builder.put(grammarAccess.getDataTypeAccess().getGroup_0(), "rule__DataType__Group_0__0");
			builder.put(grammarAccess.getDataTypeAccess().getGroup_1(), "rule__DataType__Group_1__0");
			builder.put(grammarAccess.getDataTypeAccess().getGroup_2(), "rule__DataType__Group_2__0");
			builder.put(grammarAccess.getDataTypeAccess().getGroup_3(), "rule__DataType__Group_3__0");
			builder.put(grammarAccess.getDataTypeAccess().getGroup_4(), "rule__DataType__Group_4__0");
			builder.put(grammarAccess.getDataTypeAccess().getGroup_5(), "rule__DataType__Group_5__0");
			builder.put(grammarAccess.getValidatorAccess().getGroup(), "rule__Validator__Group__0");
			builder.put(grammarAccess.getValidatorAccess().getGroup_4(), "rule__Validator__Group_4__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getValidatorUseAccess().getGroup(), "rule__ValidatorUse__Group__0");
			builder.put(grammarAccess.getValidatorUseAccess().getGroup_3(), "rule__ValidatorUse__Group_3__0");
			builder.put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
			builder.put(grammarAccess.getRelationshipAccess().getGroup(), "rule__Relationship__Group__0");
			builder.put(grammarAccess.getRelationshipTypeAccess().getGroup_0(), "rule__RelationshipType__Group_0__0");
			builder.put(grammarAccess.getRelationshipTypeAccess().getGroup_1(), "rule__RelationshipType__Group_1__0");
			builder.put(grammarAccess.getRelationshipTypeAccess().getGroup_2(), "rule__RelationshipType__Group_2__0");
			builder.put(grammarAccess.getRelationshipTypeAccess().getGroup_3(), "rule__RelationshipType__Group_3__0");
			builder.put(grammarAccess.getEvalAccess().getGroup(), "rule__Eval__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup(), "rule__PlusMinus__Group__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1(), "rule__PlusMinus__Group_1__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1_0_0(), "rule__PlusMinus__Group_1_0_0__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1_0_1(), "rule__PlusMinus__Group_1_0_1__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup(), "rule__MulDiv__Group__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1(), "rule__MulDiv__Group_1__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1_0(), "rule__MulDiv__Group_1_0__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
			builder.put(grammarAccess.getProjectAccess().getNameAssignment_1(), "rule__Project__NameAssignment_1");
			builder.put(grammarAccess.getProjectAccess().getElementsAssignment_4(), "rule__Project__ElementsAssignment_4");
			builder.put(grammarAccess.getDBConfigAccess().getTypeAssignment_1(), "rule__DBConfig__TypeAssignment_1");
			builder.put(grammarAccess.getDBConfigAccess().getConfigAssignment_4(), "rule__DBConfig__ConfigAssignment_4");
			builder.put(grammarAccess.getDBDeclAccess().getTypeAssignment_0_1(), "rule__DBDecl__TypeAssignment_0_1");
			builder.put(grammarAccess.getDBDeclAccess().getValueAssignment_0_3(), "rule__DBDecl__ValueAssignment_0_3");
			builder.put(grammarAccess.getDBDeclAccess().getTypeAssignment_1_1(), "rule__DBDecl__TypeAssignment_1_1");
			builder.put(grammarAccess.getDBDeclAccess().getValueAssignment_1_3(), "rule__DBDecl__ValueAssignment_1_3");
			builder.put(grammarAccess.getDBDeclAccess().getTypeAssignment_2_1(), "rule__DBDecl__TypeAssignment_2_1");
			builder.put(grammarAccess.getDBDeclAccess().getValueAssignment_2_3(), "rule__DBDecl__ValueAssignment_2_3");
			builder.put(grammarAccess.getDBDeclAccess().getTypeAssignment_3_1(), "rule__DBDecl__TypeAssignment_3_1");
			builder.put(grammarAccess.getDBDeclAccess().getValueAssignment_3_3(), "rule__DBDecl__ValueAssignment_3_3");
			builder.put(grammarAccess.getDBDeclAccess().getTypeAssignment_4_1(), "rule__DBDecl__TypeAssignment_4_1");
			builder.put(grammarAccess.getDBDeclAccess().getValueAssignment_4_3(), "rule__DBDecl__ValueAssignment_4_3");
			builder.put(grammarAccess.getDBDeclAccess().getTypeAssignment_5_1(), "rule__DBDecl__TypeAssignment_5_1");
			builder.put(grammarAccess.getDBDeclAccess().getValueAssignment_5_3(), "rule__DBDecl__ValueAssignment_5_3");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_2(), "rule__Entity__NameAssignment_2");
			builder.put(grammarAccess.getEntityAccess().getRelationshipAssignment_3(), "rule__Entity__RelationshipAssignment_3");
			builder.put(grammarAccess.getEntityAccess().getMembersAssignment_6(), "rule__Entity__MembersAssignment_6");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
			builder.put(grammarAccess.getFieldAccess().getTypeAssignment_3(), "rule__Field__TypeAssignment_3");
			builder.put(grammarAccess.getFieldAccess().getPropertiesAssignment_6(), "rule__Field__PropertiesAssignment_6");
			builder.put(grammarAccess.getValidationCheckAccess().getValidatorAssignment_1(), "rule__ValidationCheck__ValidatorAssignment_1");
			builder.put(grammarAccess.getValidationCheckAccess().getErrrorMsgAssignment_3(), "rule__ValidationCheck__ErrrorMsgAssignment_3");
			builder.put(grammarAccess.getCheckBlockAccess().getValidatorAssignment_0(), "rule__CheckBlock__ValidatorAssignment_0");
			builder.put(grammarAccess.getCheckBlockAccess().getStatusCondAssignment_3(), "rule__CheckBlock__StatusCondAssignment_3");
			builder.put(grammarAccess.getValidationStatusAccess().getMsgAssignment_0_3(), "rule__ValidationStatus__MsgAssignment_0_3");
			builder.put(grammarAccess.getValidationStatusAccess().getMsgAssignment_1_3(), "rule__ValidationStatus__MsgAssignment_1_3");
			builder.put(grammarAccess.getValidationStatusAccess().getMsgAssignment_2_3(), "rule__ValidationStatus__MsgAssignment_2_3");
			builder.put(grammarAccess.getFieldPropAccess().getTypeAssignment_0_1(), "rule__FieldProp__TypeAssignment_0_1");
			builder.put(grammarAccess.getFieldPropAccess().getValueAssignment_0_3(), "rule__FieldProp__ValueAssignment_0_3");
			builder.put(grammarAccess.getFieldPropAccess().getTypeAssignment_1_1(), "rule__FieldProp__TypeAssignment_1_1");
			builder.put(grammarAccess.getFieldPropAccess().getValueAssignment_1_3(), "rule__FieldProp__ValueAssignment_1_3");
			builder.put(grammarAccess.getDataTypeAccess().getTypeAssignment_0_1(), "rule__DataType__TypeAssignment_0_1");
			builder.put(grammarAccess.getDataTypeAccess().getTypeAssignment_1_1(), "rule__DataType__TypeAssignment_1_1");
			builder.put(grammarAccess.getDataTypeAccess().getTypeAssignment_2_1(), "rule__DataType__TypeAssignment_2_1");
			builder.put(grammarAccess.getDataTypeAccess().getTypeAssignment_3_1(), "rule__DataType__TypeAssignment_3_1");
			builder.put(grammarAccess.getDataTypeAccess().getTypeAssignment_4_1(), "rule__DataType__TypeAssignment_4_1");
			builder.put(grammarAccess.getDataTypeAccess().getTypeAssignment_5_1(), "rule__DataType__TypeAssignment_5_1");
			builder.put(grammarAccess.getValidatorAccess().getNameAssignment_1(), "rule__Validator__NameAssignment_1");
			builder.put(grammarAccess.getValidatorAccess().getParamsAssignment_3(), "rule__Validator__ParamsAssignment_3");
			builder.put(grammarAccess.getValidatorAccess().getParamsAssignment_4_1(), "rule__Validator__ParamsAssignment_4_1");
			builder.put(grammarAccess.getValidatorAccess().getComparisonAssignment_8(), "rule__Validator__ComparisonAssignment_8");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
			builder.put(grammarAccess.getParameterUseAccess().getRefAssignment(), "rule__ParameterUse__RefAssignment");
			builder.put(grammarAccess.getValidatorUseAccess().getValidatorAssignment_0(), "rule__ValidatorUse__ValidatorAssignment_0");
			builder.put(grammarAccess.getValidatorUseAccess().getArgsAssignment_2(), "rule__ValidatorUse__ArgsAssignment_2");
			builder.put(grammarAccess.getValidatorUseAccess().getArgsAssignment_3_1(), "rule__ValidatorUse__ArgsAssignment_3_1");
			builder.put(grammarAccess.getArgumentAccess().getRefAssignment_1(), "rule__Argument__RefAssignment_1");
			builder.put(grammarAccess.getRelationshipAccess().getRelationTypeAssignment_0(), "rule__Relationship__RelationTypeAssignment_0");
			builder.put(grammarAccess.getRelationshipAccess().getEntityAssignment_1(), "rule__Relationship__EntityAssignment_1");
			builder.put(grammarAccess.getEvalAccess().getExpressionAssignment_2(), "rule__Eval__ExpressionAssignment_2");
			builder.put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
			builder.put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualityAccess().getOpAssignment_1_1(), "rule__Equality__OpAssignment_1_1");
			builder.put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
			builder.put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
			builder.put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
			builder.put(grammarAccess.getPlusMinusAccess().getRightAssignment_1_1(), "rule__PlusMinus__RightAssignment_1_1");
			builder.put(grammarAccess.getMulDivAccess().getOpAssignment_1_0_1(), "rule__MulDiv__OpAssignment_1_0_1");
			builder.put(grammarAccess.getMulDivAccess().getRightAssignment_1_1(), "rule__MulDiv__RightAssignment_1_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CMSdslGrammarAccess grammarAccess;

	@Override
	protected InternalCMSdslParser createParser() {
		InternalCMSdslParser result = new InternalCMSdslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new CMSdslTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CMSdslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CMSdslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
