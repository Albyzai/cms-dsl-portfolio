/**
 * generated by Xtext 2.22.0
 */
package jope015.mdsd2021.reexam.cMSdsl.util;

import jope015.mdsd2021.reexam.cMSdsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see jope015.mdsd2021.reexam.cMSdsl.CMSdslPackage
 * @generated
 */
public class CMSdslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CMSdslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CMSdslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = CMSdslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CMSdslSwitch<Adapter> modelSwitch =
    new CMSdslSwitch<Adapter>()
    {
      @Override
      public Adapter caseProject(Project object)
      {
        return createProjectAdapter();
      }
      @Override
      public Adapter casePrimaryElement(PrimaryElement object)
      {
        return createPrimaryElementAdapter();
      }
      @Override
      public Adapter caseDBConfig(DBConfig object)
      {
        return createDBConfigAdapter();
      }
      @Override
      public Adapter caseDBDecl(DBDecl object)
      {
        return createDBDeclAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseEntityModel(EntityModel object)
      {
        return createEntityModelAdapter();
      }
      @Override
      public Adapter caseEntityService(EntityService object)
      {
        return createEntityServiceAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseFieldProp(FieldProp object)
      {
        return createFieldPropAdapter();
      }
      @Override
      public Adapter caseDataType(DataType object)
      {
        return createDataTypeAdapter();
      }
      @Override
      public Adapter caseLib(Lib object)
      {
        return createLibAdapter();
      }
      @Override
      public Adapter caseHost(Host object)
      {
        return createHostAdapter();
      }
      @Override
      public Adapter casePort(Port object)
      {
        return createPortAdapter();
      }
      @Override
      public Adapter caseDialect(Dialect object)
      {
        return createDialectAdapter();
      }
      @Override
      public Adapter caseUser(User object)
      {
        return createUserAdapter();
      }
      @Override
      public Adapter casePass(Pass object)
      {
        return createPassAdapter();
      }
      @Override
      public Adapter caseDef(Def object)
      {
        return createDefAdapter();
      }
      @Override
      public Adapter casePropTest(PropTest object)
      {
        return createPropTestAdapter();
      }
      @Override
      public Adapter caseStr(Str object)
      {
        return createStrAdapter();
      }
      @Override
      public Adapter caseDt(Dt object)
      {
        return createDtAdapter();
      }
      @Override
      public Adapter caseInteg(Integ object)
      {
        return createIntegAdapter();
      }
      @Override
      public Adapter caseLng(Lng object)
      {
        return createLngAdapter();
      }
      @Override
      public Adapter caseBool(Bool object)
      {
        return createBoolAdapter();
      }
      @Override
      public Adapter caseFlt(Flt object)
      {
        return createFltAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Project <em>Project</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Project
   * @generated
   */
  public Adapter createProjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.PrimaryElement <em>Primary Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.PrimaryElement
   * @generated
   */
  public Adapter createPrimaryElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.DBConfig <em>DB Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.DBConfig
   * @generated
   */
  public Adapter createDBConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.DBDecl <em>DB Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.DBDecl
   * @generated
   */
  public Adapter createDBDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.EntityModel <em>Entity Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.EntityModel
   * @generated
   */
  public Adapter createEntityModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.EntityService <em>Entity Service</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.EntityService
   * @generated
   */
  public Adapter createEntityServiceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.FieldProp <em>Field Prop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.FieldProp
   * @generated
   */
  public Adapter createFieldPropAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.DataType <em>Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.DataType
   * @generated
   */
  public Adapter createDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Lib <em>Lib</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Lib
   * @generated
   */
  public Adapter createLibAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Host <em>Host</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Host
   * @generated
   */
  public Adapter createHostAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Port <em>Port</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Port
   * @generated
   */
  public Adapter createPortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Dialect <em>Dialect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Dialect
   * @generated
   */
  public Adapter createDialectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.User <em>User</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.User
   * @generated
   */
  public Adapter createUserAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Pass <em>Pass</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Pass
   * @generated
   */
  public Adapter createPassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Def <em>Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Def
   * @generated
   */
  public Adapter createDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.PropTest <em>Prop Test</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.PropTest
   * @generated
   */
  public Adapter createPropTestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Str <em>Str</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Str
   * @generated
   */
  public Adapter createStrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Dt <em>Dt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Dt
   * @generated
   */
  public Adapter createDtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Integ <em>Integ</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Integ
   * @generated
   */
  public Adapter createIntegAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Lng <em>Lng</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Lng
   * @generated
   */
  public Adapter createLngAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Bool <em>Bool</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Bool
   * @generated
   */
  public Adapter createBoolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jope015.mdsd2021.reexam.cMSdsl.Flt <em>Flt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jope015.mdsd2021.reexam.cMSdsl.Flt
   * @generated
   */
  public Adapter createFltAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //CMSdslAdapterFactory
