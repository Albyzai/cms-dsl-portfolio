/*
 * generated by Xtext 2.22.0
 */
package jope015.mdsd2021.reexam.serializer;

import com.google.inject.Inject;
import java.util.Set;
import jope015.mdsd2021.reexam.cMSdsl.Bool;
import jope015.mdsd2021.reexam.cMSdsl.CMSdslPackage;
import jope015.mdsd2021.reexam.cMSdsl.DBConfig;
import jope015.mdsd2021.reexam.cMSdsl.Def;
import jope015.mdsd2021.reexam.cMSdsl.Dialect;
import jope015.mdsd2021.reexam.cMSdsl.Dt;
import jope015.mdsd2021.reexam.cMSdsl.Entity;
import jope015.mdsd2021.reexam.cMSdsl.EntityModel;
import jope015.mdsd2021.reexam.cMSdsl.EntityService;
import jope015.mdsd2021.reexam.cMSdsl.Field;
import jope015.mdsd2021.reexam.cMSdsl.Flt;
import jope015.mdsd2021.reexam.cMSdsl.Host;
import jope015.mdsd2021.reexam.cMSdsl.Integ;
import jope015.mdsd2021.reexam.cMSdsl.Lib;
import jope015.mdsd2021.reexam.cMSdsl.Lng;
import jope015.mdsd2021.reexam.cMSdsl.Pass;
import jope015.mdsd2021.reexam.cMSdsl.Port;
import jope015.mdsd2021.reexam.cMSdsl.Project;
import jope015.mdsd2021.reexam.cMSdsl.PropTest;
import jope015.mdsd2021.reexam.cMSdsl.Str;
import jope015.mdsd2021.reexam.cMSdsl.User;
import jope015.mdsd2021.reexam.services.CMSdslGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CMSdslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CMSdslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CMSdslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CMSdslPackage.BOOL:
				sequence_DataType(context, (Bool) semanticObject); 
				return; 
			case CMSdslPackage.DB_CONFIG:
				sequence_DBConfig(context, (DBConfig) semanticObject); 
				return; 
			case CMSdslPackage.DEF:
				sequence_FieldProp(context, (Def) semanticObject); 
				return; 
			case CMSdslPackage.DIALECT:
				sequence_DBDecl(context, (Dialect) semanticObject); 
				return; 
			case CMSdslPackage.DT:
				sequence_DataType(context, (Dt) semanticObject); 
				return; 
			case CMSdslPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case CMSdslPackage.ENTITY_MODEL:
				sequence_EntityModel(context, (EntityModel) semanticObject); 
				return; 
			case CMSdslPackage.ENTITY_SERVICE:
				sequence_EntityService(context, (EntityService) semanticObject); 
				return; 
			case CMSdslPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case CMSdslPackage.FLT:
				sequence_DataType(context, (Flt) semanticObject); 
				return; 
			case CMSdslPackage.HOST:
				sequence_DBDecl(context, (Host) semanticObject); 
				return; 
			case CMSdslPackage.INTEG:
				sequence_DataType(context, (Integ) semanticObject); 
				return; 
			case CMSdslPackage.LIB:
				sequence_DBDecl(context, (Lib) semanticObject); 
				return; 
			case CMSdslPackage.LNG:
				sequence_DataType(context, (Lng) semanticObject); 
				return; 
			case CMSdslPackage.PASS:
				sequence_DBDecl(context, (Pass) semanticObject); 
				return; 
			case CMSdslPackage.PORT:
				sequence_DBDecl(context, (Port) semanticObject); 
				return; 
			case CMSdslPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case CMSdslPackage.PROP_TEST:
				sequence_FieldProp(context, (PropTest) semanticObject); 
				return; 
			case CMSdslPackage.STR:
				sequence_DataType(context, (Str) semanticObject); 
				return; 
			case CMSdslPackage.USER:
				sequence_DBDecl(context, (User) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     PrimaryElement returns DBConfig
	 *     DBConfig returns DBConfig
	 *
	 * Constraint:
	 *     (type='database' config+=DBDecl*)
	 */
	protected void sequence_DBConfig(ISerializationContext context, DBConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DBDecl returns Dialect
	 *
	 * Constraint:
	 *     (type='dialect' value=STRING)
	 */
	protected void sequence_DBDecl(ISerializationContext context, Dialect semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DB_DECL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DB_DECL__TYPE));
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DIALECT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DIALECT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDBDeclAccess().getTypeDialectKeyword_3_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDBDeclAccess().getValueSTRINGTerminalRuleCall_3_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DBDecl returns Host
	 *
	 * Constraint:
	 *     (type='hostname' value=STRING)
	 */
	protected void sequence_DBDecl(ISerializationContext context, Host semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DB_DECL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DB_DECL__TYPE));
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.HOST__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.HOST__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDBDeclAccess().getTypeHostnameKeyword_1_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDBDeclAccess().getValueSTRINGTerminalRuleCall_1_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DBDecl returns Lib
	 *
	 * Constraint:
	 *     (type='library' value=STRING)
	 */
	protected void sequence_DBDecl(ISerializationContext context, Lib semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DB_DECL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DB_DECL__TYPE));
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.LIB__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.LIB__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDBDeclAccess().getTypeLibraryKeyword_0_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDBDeclAccess().getValueSTRINGTerminalRuleCall_0_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DBDecl returns Pass
	 *
	 * Constraint:
	 *     (type='password' value=STRING)
	 */
	protected void sequence_DBDecl(ISerializationContext context, Pass semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DB_DECL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DB_DECL__TYPE));
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.PASS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.PASS__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDBDeclAccess().getTypePasswordKeyword_5_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDBDeclAccess().getValueSTRINGTerminalRuleCall_5_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DBDecl returns Port
	 *
	 * Constraint:
	 *     (type='port' value=INT)
	 */
	protected void sequence_DBDecl(ISerializationContext context, Port semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DB_DECL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DB_DECL__TYPE));
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.PORT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.PORT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDBDeclAccess().getTypePortKeyword_2_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDBDeclAccess().getValueINTTerminalRuleCall_2_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DBDecl returns User
	 *
	 * Constraint:
	 *     (type='username' value=STRING)
	 */
	protected void sequence_DBDecl(ISerializationContext context, User semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DB_DECL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DB_DECL__TYPE));
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.USER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.USER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDBDeclAccess().getTypeUsernameKeyword_4_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDBDeclAccess().getValueSTRINGTerminalRuleCall_4_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns Bool
	 *
	 * Constraint:
	 *     type='bool'
	 */
	protected void sequence_DataType(ISerializationContext context, Bool semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DATA_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DATA_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getTypeBoolKeyword_4_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns Dt
	 *
	 * Constraint:
	 *     type='date'
	 */
	protected void sequence_DataType(ISerializationContext context, Dt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DATA_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DATA_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getTypeDateKeyword_1_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns Flt
	 *
	 * Constraint:
	 *     type='float'
	 */
	protected void sequence_DataType(ISerializationContext context, Flt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DATA_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DATA_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getTypeFloatKeyword_5_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns Integ
	 *
	 * Constraint:
	 *     type='int'
	 */
	protected void sequence_DataType(ISerializationContext context, Integ semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DATA_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DATA_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getTypeIntKeyword_2_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns Lng
	 *
	 * Constraint:
	 *     type='long'
	 */
	protected void sequence_DataType(ISerializationContext context, Lng semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DATA_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DATA_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getTypeLongKeyword_3_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns Str
	 *
	 * Constraint:
	 *     type='string'
	 */
	protected void sequence_DataType(ISerializationContext context, Str semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.DATA_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.DATA_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getTypeStringKeyword_0_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EntityModel returns EntityModel
	 *
	 * Constraint:
	 *     fields+=Field*
	 */
	protected void sequence_EntityModel(ISerializationContext context, EntityModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityService returns EntityService
	 *
	 * Constraint:
	 *     {EntityService}
	 */
	protected void sequence_EntityService(ISerializationContext context, EntityService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimaryElement returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID model=EntityModel service=EntityService? ui=EntityUI?)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldProp returns Def
	 *
	 * Constraint:
	 *     (type='default' value=STRING)
	 */
	protected void sequence_FieldProp(ISerializationContext context, Def semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.FIELD_PROP__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.FIELD_PROP__TYPE));
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.FIELD_PROP__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.FIELD_PROP__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldPropAccess().getTypeDefaultKeyword_0_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getFieldPropAccess().getValueSTRINGTerminalRuleCall_0_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FieldProp returns PropTest
	 *
	 * Constraint:
	 *     (type='test' value=STRING)
	 */
	protected void sequence_FieldProp(ISerializationContext context, PropTest semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.FIELD_PROP__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.FIELD_PROP__TYPE));
			if (transientValues.isValueTransient(semanticObject, CMSdslPackage.Literals.FIELD_PROP__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMSdslPackage.Literals.FIELD_PROP__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldPropAccess().getTypeTestKeyword_1_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getFieldPropAccess().getValueSTRINGTerminalRuleCall_1_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (type=DataType name=ID properties+=FieldProp*)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Project returns Project
	 *
	 * Constraint:
	 *     (name=ID elements+=PrimaryElement*)
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
