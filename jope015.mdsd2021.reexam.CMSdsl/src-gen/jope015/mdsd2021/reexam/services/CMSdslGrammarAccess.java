/*
 * generated by Xtext 2.22.0
 */
package jope015.mdsd2021.reexam.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CMSdslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsPrimaryElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Project:
		//	'project' name=ID ':' BEGIN
		//	elements+=PrimaryElement*
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'project' name=ID ':' BEGIN elements+=PrimaryElement* END
		public Group getGroup() { return cGroup; }
		
		//'project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//elements+=PrimaryElement*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//PrimaryElement
		public RuleCall getElementsPrimaryElementParserRuleCall_4_0() { return cElementsPrimaryElementParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class PrimaryElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.PrimaryElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDBConfigParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValidatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEvalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimaryElement:
		//	DBConfig | Entity | Validator | Eval;
		@Override public ParserRule getRule() { return rule; }
		
		//DBConfig | Entity | Validator | Eval
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DBConfig
		public RuleCall getDBConfigParserRuleCall_0() { return cDBConfigParserRuleCall_0; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }
		
		//Validator
		public RuleCall getValidatorParserRuleCall_2() { return cValidatorParserRuleCall_2; }
		
		//Eval
		public RuleCall getEvalParserRuleCall_3() { return cEvalParserRuleCall_3; }
	}
	public class DBConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.DBConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDBConfigAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeDatabaseKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cConfigAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConfigDBDeclParserRuleCall_4_0 = (RuleCall)cConfigAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//DBConfig:
		//	{DBConfig} type='database' ':' BEGIN
		//	config+=DBDecl*
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//{DBConfig} type='database' ':' BEGIN config+=DBDecl* END
		public Group getGroup() { return cGroup; }
		
		//{DBConfig}
		public Action getDBConfigAction_0() { return cDBConfigAction_0; }
		
		//type='database'
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//'database'
		public Keyword getTypeDatabaseKeyword_1_0() { return cTypeDatabaseKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//config+=DBDecl*
		public Assignment getConfigAssignment_4() { return cConfigAssignment_4; }
		
		//DBDecl
		public RuleCall getConfigDBDeclParserRuleCall_4_0() { return cConfigDBDeclParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class DBDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.DBDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLibAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cTypeLibraryKeyword_0_1_0 = (Keyword)cTypeAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cHostAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cTypeHostnameKeyword_1_1_0 = (Keyword)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPortAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cTypePortKeyword_2_1_0 = (Keyword)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cValueAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_2_3_0 = (RuleCall)cValueAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDialectAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cTypeDialectKeyword_3_1_0 = (Keyword)cTypeAssignment_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cValueAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_3_0 = (RuleCall)cValueAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cUserAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cTypeUsernameKeyword_4_1_0 = (Keyword)cTypeAssignment_4_1.eContents().get(0);
		private final Keyword cColonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cValueAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_3_0 = (RuleCall)cValueAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPassAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cTypePasswordKeyword_5_1_0 = (Keyword)cTypeAssignment_5_1.eContents().get(0);
		private final Keyword cColonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cValueAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_5_3_0 = (RuleCall)cValueAssignment_5_3.eContents().get(0);
		
		//DBDecl:
		//	{Lib} type='library' ':' value=STRING | {Host} type='hostname' ':' value=STRING | {Port} type='port' ':' value=INT |
		//	{Dialect} type='dialect' ':' value=STRING | {User} type='username' ':' value=STRING | {Pass} type='password' ':'
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{Lib} type='library' ':' value=STRING | {Host} type='hostname' ':' value=STRING | {Port} type='port' ':' value=INT |
		//{Dialect} type='dialect' ':' value=STRING | {User} type='username' ':' value=STRING | {Pass} type='password' ':'
		//value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Lib} type='library' ':' value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{Lib}
		public Action getLibAction_0_0() { return cLibAction_0_0; }
		
		//type='library'
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//'library'
		public Keyword getTypeLibraryKeyword_0_1_0() { return cTypeLibraryKeyword_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//value=STRING
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_3_0() { return cValueSTRINGTerminalRuleCall_0_3_0; }
		
		//{Host} type='hostname' ':' value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{Host}
		public Action getHostAction_1_0() { return cHostAction_1_0; }
		
		//type='hostname'
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//'hostname'
		public Keyword getTypeHostnameKeyword_1_1_0() { return cTypeHostnameKeyword_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//value=STRING
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_3_0() { return cValueSTRINGTerminalRuleCall_1_3_0; }
		
		//{Port} type='port' ':' value=INT
		public Group getGroup_2() { return cGroup_2; }
		
		//{Port}
		public Action getPortAction_2_0() { return cPortAction_2_0; }
		
		//type='port'
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//'port'
		public Keyword getTypePortKeyword_2_1_0() { return cTypePortKeyword_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//value=INT
		public Assignment getValueAssignment_2_3() { return cValueAssignment_2_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_3_0() { return cValueINTTerminalRuleCall_2_3_0; }
		
		//{Dialect} type='dialect' ':' value=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{Dialect}
		public Action getDialectAction_3_0() { return cDialectAction_3_0; }
		
		//type='dialect'
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//'dialect'
		public Keyword getTypeDialectKeyword_3_1_0() { return cTypeDialectKeyword_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }
		
		//value=STRING
		public Assignment getValueAssignment_3_3() { return cValueAssignment_3_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_3_0() { return cValueSTRINGTerminalRuleCall_3_3_0; }
		
		//{User} type='username' ':' value=STRING
		public Group getGroup_4() { return cGroup_4; }
		
		//{User}
		public Action getUserAction_4_0() { return cUserAction_4_0; }
		
		//type='username'
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//'username'
		public Keyword getTypeUsernameKeyword_4_1_0() { return cTypeUsernameKeyword_4_1_0; }
		
		//':'
		public Keyword getColonKeyword_4_2() { return cColonKeyword_4_2; }
		
		//value=STRING
		public Assignment getValueAssignment_4_3() { return cValueAssignment_4_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_3_0() { return cValueSTRINGTerminalRuleCall_4_3_0; }
		
		//{Pass} type='password' ':' value=STRING
		public Group getGroup_5() { return cGroup_5; }
		
		//{Pass}
		public Action getPassAction_5_0() { return cPassAction_5_0; }
		
		//type='password'
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }
		
		//'password'
		public Keyword getTypePasswordKeyword_5_1_0() { return cTypePasswordKeyword_5_1_0; }
		
		//':'
		public Keyword getColonKeyword_5_2() { return cColonKeyword_5_2; }
		
		//value=STRING
		public Assignment getValueAssignment_5_3() { return cValueAssignment_5_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_5_3_0() { return cValueSTRINGTerminalRuleCall_5_3_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRelationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRelationsRelationshipParserRuleCall_3_0_0 = (RuleCall)cRelationsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cAndKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cRelationsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cRelationsRelationshipParserRuleCall_3_1_1_0 = (RuleCall)cRelationsAssignment_3_1_1.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cBEGINTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersEntityDeclParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Entity:
		//	{Entity}
		//	'entity' name=ID (relations+=Relationship ('and' relations+=Relationship)*)? ':' BEGIN
		//	members+=EntityDecl*
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Entity} 'entity' name=ID (relations+=Relationship ('and' relations+=Relationship)*)? ':' BEGIN members+=EntityDecl* END
		public Group getGroup() { return cGroup; }
		
		//{Entity}
		public Action getEntityAction_0() { return cEntityAction_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(relations+=Relationship ('and' relations+=Relationship)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//relations+=Relationship
		public Assignment getRelationsAssignment_3_0() { return cRelationsAssignment_3_0; }
		
		//Relationship
		public RuleCall getRelationsRelationshipParserRuleCall_3_0_0() { return cRelationsRelationshipParserRuleCall_3_0_0; }
		
		//('and' relations+=Relationship)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'and'
		public Keyword getAndKeyword_3_1_0() { return cAndKeyword_3_1_0; }
		
		//relations+=Relationship
		public Assignment getRelationsAssignment_3_1_1() { return cRelationsAssignment_3_1_1; }
		
		//Relationship
		public RuleCall getRelationsRelationshipParserRuleCall_3_1_1_0() { return cRelationsRelationshipParserRuleCall_3_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_5() { return cBEGINTerminalRuleCall_5; }
		
		//members+=EntityDecl*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }
		
		//EntityDecl
		public RuleCall getMembersEntityDeclParserRuleCall_6_0() { return cMembersEntityDeclParserRuleCall_6_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_7() { return cENDTerminalRuleCall_7; }
	}
	public class EntityDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.EntityDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValidationCheckParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EntityDecl:
		//	Field | ValidationCheck;
		@Override public ParserRule getRule() { return rule; }
		
		//Field | ValidationCheck
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }
		
		//ValidationCheck
		public RuleCall getValidationCheckParserRuleCall_1() { return cValidationCheckParserRuleCall_1; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDontShowAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDontShowHideKeyword_0_0 = (Keyword)cDontShowAssignment_0.eContents().get(0);
		private final Keyword cFieldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeDataTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cPropertiesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cPropertiesFieldPropParserRuleCall_5_2_0 = (RuleCall)cPropertiesAssignment_5_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		
		//Field:
		//	dontShow?='hide'? 'field' name=ID ':' type=DataType ('=>' BEGIN
		//	properties+=FieldProp*
		//	END)?;
		@Override public ParserRule getRule() { return rule; }
		
		//dontShow?='hide'? 'field' name=ID ':' type=DataType ('=>' BEGIN properties+=FieldProp* END)?
		public Group getGroup() { return cGroup; }
		
		//dontShow?='hide'?
		public Assignment getDontShowAssignment_0() { return cDontShowAssignment_0; }
		
		//'hide'
		public Keyword getDontShowHideKeyword_0_0() { return cDontShowHideKeyword_0_0; }
		
		//'field'
		public Keyword getFieldKeyword_1() { return cFieldKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=DataType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_4_0() { return cTypeDataTypeParserRuleCall_4_0; }
		
		//('=>' BEGIN properties+=FieldProp* END)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_5_0() { return cEqualsSignGreaterThanSignKeyword_5_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_5_1() { return cBEGINTerminalRuleCall_5_1; }
		
		//properties+=FieldProp*
		public Assignment getPropertiesAssignment_5_2() { return cPropertiesAssignment_5_2; }
		
		//FieldProp
		public RuleCall getPropertiesFieldPropParserRuleCall_5_2_0() { return cPropertiesFieldPropParserRuleCall_5_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5_3() { return cENDTerminalRuleCall_5_3; }
	}
	public class ValidationCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.ValidationCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValidatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValidatorValidatorUseParserRuleCall_1_0 = (RuleCall)cValidatorAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cErrrorMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cErrrorMsgSTRINGTerminalRuleCall_3_0 = (RuleCall)cErrrorMsgAssignment_3.eContents().get(0);
		
		////ValidationCheck:
		////	'check' (Check | CheckBlock)
		////;
		//ValidationCheck:
		//	'check' validator=ValidatorUse '=>' errrorMsg=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'check' validator=ValidatorUse '=>' errrorMsg=STRING
		public Group getGroup() { return cGroup; }
		
		//'check'
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//validator=ValidatorUse
		public Assignment getValidatorAssignment_1() { return cValidatorAssignment_1; }
		
		//ValidatorUse
		public RuleCall getValidatorValidatorUseParserRuleCall_1_0() { return cValidatorValidatorUseParserRuleCall_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//errrorMsg=STRING
		public Assignment getErrrorMsgAssignment_3() { return cErrrorMsgAssignment_3; }
		
		//STRING
		public RuleCall getErrrorMsgSTRINGTerminalRuleCall_3_0() { return cErrrorMsgSTRINGTerminalRuleCall_3_0; }
	}
	public class ValidatorUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.ValidatorUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValidatorUseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValidatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValidatorValidatorCrossReference_1_0 = (CrossReference)cValidatorAssignment_1.eContents().get(0);
		private final RuleCall cValidatorValidatorIDTerminalRuleCall_1_0_1 = (RuleCall)cValidatorValidatorCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cArgsFieldCrossReference_3_0 = (CrossReference)cArgsAssignment_3.eContents().get(0);
		private final RuleCall cArgsFieldIDTerminalRuleCall_3_0_1 = (RuleCall)cArgsFieldCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cArgsFieldCrossReference_4_1_0 = (CrossReference)cArgsAssignment_4_1.eContents().get(0);
		private final RuleCall cArgsFieldIDTerminalRuleCall_4_1_0_1 = (RuleCall)cArgsFieldCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ValidatorUse:
		//	{ValidatorUse} validator=[Validator] '(' args+=[Field] (',' args+=[Field])* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ValidatorUse} validator=[Validator] '(' args+=[Field] (',' args+=[Field])* ')'
		public Group getGroup() { return cGroup; }
		
		//{ValidatorUse}
		public Action getValidatorUseAction_0() { return cValidatorUseAction_0; }
		
		//validator=[Validator]
		public Assignment getValidatorAssignment_1() { return cValidatorAssignment_1; }
		
		//[Validator]
		public CrossReference getValidatorValidatorCrossReference_1_0() { return cValidatorValidatorCrossReference_1_0; }
		
		//ID
		public RuleCall getValidatorValidatorIDTerminalRuleCall_1_0_1() { return cValidatorValidatorIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//args+=[Field]
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//[Field]
		public CrossReference getArgsFieldCrossReference_3_0() { return cArgsFieldCrossReference_3_0; }
		
		//ID
		public RuleCall getArgsFieldIDTerminalRuleCall_3_0_1() { return cArgsFieldIDTerminalRuleCall_3_0_1; }
		
		//(',' args+=[Field])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//args+=[Field]
		public Assignment getArgsAssignment_4_1() { return cArgsAssignment_4_1; }
		
		//[Field]
		public CrossReference getArgsFieldCrossReference_4_1_0() { return cArgsFieldCrossReference_4_1_0; }
		
		//ID
		public RuleCall getArgsFieldIDTerminalRuleCall_4_1_0_1() { return cArgsFieldIDTerminalRuleCall_4_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CheckBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.CheckBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValidatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValidatorValidatorUseParserRuleCall_0_0 = (RuleCall)cValidatorAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStatusCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatusCondValidationStatusParserRuleCall_3_0 = (RuleCall)cStatusCondAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//CheckBlock:
		//	validator=ValidatorUse '=>' BEGIN
		//	statusCond+=ValidationStatus*
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//validator=ValidatorUse '=>' BEGIN statusCond+=ValidationStatus* END
		public Group getGroup() { return cGroup; }
		
		//validator=ValidatorUse
		public Assignment getValidatorAssignment_0() { return cValidatorAssignment_0; }
		
		//ValidatorUse
		public RuleCall getValidatorValidatorUseParserRuleCall_0_0() { return cValidatorValidatorUseParserRuleCall_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//statusCond+=ValidationStatus*
		public Assignment getStatusCondAssignment_3() { return cStatusCondAssignment_3; }
		
		//ValidationStatus
		public RuleCall getStatusCondValidationStatusParserRuleCall_3_0() { return cStatusCondValidationStatusParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class ValidationStatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.ValidationStatus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cErrAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cErrorKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cMsgAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cMsgSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cMsgAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cWarnAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cWarningKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMsgAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cMsgSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cMsgAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSuccAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSuccessKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cMsgAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cMsgSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cMsgAssignment_2_3.eContents().get(0);
		
		//ValidationStatus:
		//	{Err} 'error' ':' msg=STRING | {Warn} 'warning' ':' msg=STRING | {Succ} 'success' ':' msg=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{Err} 'error' ':' msg=STRING | {Warn} 'warning' ':' msg=STRING | {Succ} 'success' ':' msg=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Err} 'error' ':' msg=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{Err}
		public Action getErrAction_0_0() { return cErrAction_0_0; }
		
		//'error'
		public Keyword getErrorKeyword_0_1() { return cErrorKeyword_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//msg=STRING
		public Assignment getMsgAssignment_0_3() { return cMsgAssignment_0_3; }
		
		//STRING
		public RuleCall getMsgSTRINGTerminalRuleCall_0_3_0() { return cMsgSTRINGTerminalRuleCall_0_3_0; }
		
		//{Warn} 'warning' ':' msg=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{Warn}
		public Action getWarnAction_1_0() { return cWarnAction_1_0; }
		
		//'warning'
		public Keyword getWarningKeyword_1_1() { return cWarningKeyword_1_1; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//msg=STRING
		public Assignment getMsgAssignment_1_3() { return cMsgAssignment_1_3; }
		
		//STRING
		public RuleCall getMsgSTRINGTerminalRuleCall_1_3_0() { return cMsgSTRINGTerminalRuleCall_1_3_0; }
		
		//{Succ} 'success' ':' msg=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{Succ}
		public Action getSuccAction_2_0() { return cSuccAction_2_0; }
		
		//'success'
		public Keyword getSuccessKeyword_2_1() { return cSuccessKeyword_2_1; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//msg=STRING
		public Assignment getMsgAssignment_2_3() { return cMsgAssignment_2_3; }
		
		//STRING
		public RuleCall getMsgSTRINGTerminalRuleCall_2_3_0() { return cMsgSTRINGTerminalRuleCall_2_3_0; }
	}
	public class FieldPropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.FieldProp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cTypeDefaultKeyword_0_1_0 = (Keyword)cTypeAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPropTestAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cTypeTestKeyword_1_1_0 = (Keyword)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInputFieldAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cTypeInputTypeKeyword_2_1_0 = (Keyword)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cValueAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cValueInputTypeParserRuleCall_2_3_0 = (RuleCall)cValueAssignment_2_3.eContents().get(0);
		
		//FieldProp:
		//	{Def} type='default' ':' value=STRING | {PropTest} type='test' ':' value=STRING | {InputField} type='inputType' ':'
		//	value=InputType
		//	//	{Check} type='check' value=ValidatorUse
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Def} type='default' ':' value=STRING | {PropTest} type='test' ':' value=STRING | {InputField} type='inputType' ':'
		//value=InputType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Def} type='default' ':' value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{Def}
		public Action getDefAction_0_0() { return cDefAction_0_0; }
		
		//type='default'
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//'default'
		public Keyword getTypeDefaultKeyword_0_1_0() { return cTypeDefaultKeyword_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//value=STRING
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_3_0() { return cValueSTRINGTerminalRuleCall_0_3_0; }
		
		//{PropTest} type='test' ':' value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{PropTest}
		public Action getPropTestAction_1_0() { return cPropTestAction_1_0; }
		
		//type='test'
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//'test'
		public Keyword getTypeTestKeyword_1_1_0() { return cTypeTestKeyword_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//value=STRING
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_3_0() { return cValueSTRINGTerminalRuleCall_1_3_0; }
		
		//{InputField} type='inputType' ':' value=InputType
		public Group getGroup_2() { return cGroup_2; }
		
		//{InputField}
		public Action getInputFieldAction_2_0() { return cInputFieldAction_2_0; }
		
		//type='inputType'
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//'inputType'
		public Keyword getTypeInputTypeKeyword_2_1_0() { return cTypeInputTypeKeyword_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//value=InputType
		public Assignment getValueAssignment_2_3() { return cValueAssignment_2_3; }
		
		//InputType
		public RuleCall getValueInputTypeParserRuleCall_2_3_0() { return cValueInputTypeParserRuleCall_2_3_0; }
	}
	public class InputTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.InputType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInpMailAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cTypeEmailKeyword_0_1_0 = (Keyword)cTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInpDateAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cTypeDateKeyword_1_1_0 = (Keyword)cTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInpNumAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cTypeNumberKeyword_2_1_0 = (Keyword)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cInpPassAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cTypePasswordKeyword_3_1_0 = (Keyword)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cInpTextAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cTypeTextKeyword_4_1_0 = (Keyword)cTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cInpTextAreaAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cTypeTextareaKeyword_5_1_0 = (Keyword)cTypeAssignment_5_1.eContents().get(0);
		
		//InputType:
		//	{InpMail} type='email' | {InpDate} type='date' | {InpNum} type='number' | {InpPass} type='password' | {InpText}
		//	type='text' | {InpTextArea} type='textarea';
		@Override public ParserRule getRule() { return rule; }
		
		//{InpMail} type='email' | {InpDate} type='date' | {InpNum} type='number' | {InpPass} type='password' | {InpText}
		//type='text' | {InpTextArea} type='textarea'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{InpMail} type='email'
		public Group getGroup_0() { return cGroup_0; }
		
		//{InpMail}
		public Action getInpMailAction_0_0() { return cInpMailAction_0_0; }
		
		//type='email'
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//'email'
		public Keyword getTypeEmailKeyword_0_1_0() { return cTypeEmailKeyword_0_1_0; }
		
		//{InpDate} type='date'
		public Group getGroup_1() { return cGroup_1; }
		
		//{InpDate}
		public Action getInpDateAction_1_0() { return cInpDateAction_1_0; }
		
		//type='date'
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//'date'
		public Keyword getTypeDateKeyword_1_1_0() { return cTypeDateKeyword_1_1_0; }
		
		//{InpNum} type='number'
		public Group getGroup_2() { return cGroup_2; }
		
		//{InpNum}
		public Action getInpNumAction_2_0() { return cInpNumAction_2_0; }
		
		//type='number'
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//'number'
		public Keyword getTypeNumberKeyword_2_1_0() { return cTypeNumberKeyword_2_1_0; }
		
		//{InpPass} type='password'
		public Group getGroup_3() { return cGroup_3; }
		
		//{InpPass}
		public Action getInpPassAction_3_0() { return cInpPassAction_3_0; }
		
		//type='password'
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//'password'
		public Keyword getTypePasswordKeyword_3_1_0() { return cTypePasswordKeyword_3_1_0; }
		
		//{InpText} type='text'
		public Group getGroup_4() { return cGroup_4; }
		
		//{InpText}
		public Action getInpTextAction_4_0() { return cInpTextAction_4_0; }
		
		//type='text'
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//'text'
		public Keyword getTypeTextKeyword_4_1_0() { return cTypeTextKeyword_4_1_0; }
		
		//{InpTextArea} type='textarea'
		public Group getGroup_5() { return cGroup_5; }
		
		//{InpTextArea}
		public Action getInpTextAreaAction_5_0() { return cInpTextAreaAction_5_0; }
		
		//type='textarea'
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }
		
		//'textarea'
		public Keyword getTypeTextareaKeyword_5_1_0() { return cTypeTextareaKeyword_5_1_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStrAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cTypeStringKeyword_0_1_0 = (Keyword)cTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDtAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cTypeDateKeyword_1_1_0 = (Keyword)cTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntegAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cTypeIntKeyword_2_1_0 = (Keyword)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLngAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cTypeLongKeyword_3_1_0 = (Keyword)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBoolAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cTypeBoolKeyword_4_1_0 = (Keyword)cTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cFltAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cTypeFloatKeyword_5_1_0 = (Keyword)cTypeAssignment_5_1.eContents().get(0);
		
		//DataType:
		//	{Str} type='string' | {Dt} type='date' | {Integ} type='int' | {Lng} type='long' | {Bool} type='bool' | {Flt}
		//	type='float';
		@Override public ParserRule getRule() { return rule; }
		
		//{Str} type='string' | {Dt} type='date' | {Integ} type='int' | {Lng} type='long' | {Bool} type='bool' | {Flt}
		//type='float'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Str} type='string'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Str}
		public Action getStrAction_0_0() { return cStrAction_0_0; }
		
		//type='string'
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//'string'
		public Keyword getTypeStringKeyword_0_1_0() { return cTypeStringKeyword_0_1_0; }
		
		//{Dt} type='date'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Dt}
		public Action getDtAction_1_0() { return cDtAction_1_0; }
		
		//type='date'
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//'date'
		public Keyword getTypeDateKeyword_1_1_0() { return cTypeDateKeyword_1_1_0; }
		
		//{Integ} type='int'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Integ}
		public Action getIntegAction_2_0() { return cIntegAction_2_0; }
		
		//type='int'
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//'int'
		public Keyword getTypeIntKeyword_2_1_0() { return cTypeIntKeyword_2_1_0; }
		
		//{Lng} type='long'
		public Group getGroup_3() { return cGroup_3; }
		
		//{Lng}
		public Action getLngAction_3_0() { return cLngAction_3_0; }
		
		//type='long'
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//'long'
		public Keyword getTypeLongKeyword_3_1_0() { return cTypeLongKeyword_3_1_0; }
		
		//{Bool} type='bool'
		public Group getGroup_4() { return cGroup_4; }
		
		//{Bool}
		public Action getBoolAction_4_0() { return cBoolAction_4_0; }
		
		//type='bool'
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//'bool'
		public Keyword getTypeBoolKeyword_4_1_0() { return cTypeBoolKeyword_4_1_0; }
		
		//{Flt} type='float'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Flt}
		public Action getFltAction_5_0() { return cFltAction_5_0; }
		
		//type='float'
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }
		
		//'float'
		public Keyword getTypeFloatKeyword_5_1_0() { return cTypeFloatKeyword_5_1_0; }
	}
	public class ValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Validator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValidatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsParameterParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParamsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_4_1_0 = (RuleCall)cParamsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cBEGINTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cComparisonAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cComparisonExpressionParserRuleCall_8_0 = (RuleCall)cComparisonAssignment_8.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//Validator:
		//	'validator' name=ID '(' params+=Parameter (',' params+=Parameter)* ')' '=>' BEGIN
		//	comparison=Expression
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'validator' name=ID '(' params+=Parameter (',' params+=Parameter)* ')' '=>' BEGIN comparison=Expression END
		public Group getGroup() { return cGroup; }
		
		//'validator'
		public Keyword getValidatorKeyword_0() { return cValidatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0() { return cParamsParameterParserRuleCall_3_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_4_1() { return cParamsAssignment_4_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_1_0() { return cParamsParameterParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_6() { return cEqualsSignGreaterThanSignKeyword_6; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_7() { return cBEGINTerminalRuleCall_7; }
		
		//comparison=Expression
		public Assignment getComparisonAssignment_8() { return cComparisonAssignment_8; }
		
		//Expression
		public RuleCall getComparisonExpressionParserRuleCall_8_0() { return cComparisonExpressionParserRuleCall_8_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_9() { return cENDTerminalRuleCall_9; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//	name=ID ':' type=DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=DataType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_0() { return cTypeDataTypeParserRuleCall_2_0; }
	}
	public class ParamOrArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.ParamOrArg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParamOrArg:
		//	Parameter | Field;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameter | Field
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_0() { return cParameterParserRuleCall_0; }
		
		//Field
		public RuleCall getFieldParserRuleCall_1() { return cFieldParserRuleCall_1; }
	}
	public class ParamOrArgUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.ParamOrArgUse");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefParamOrArgCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefParamOrArgIDTerminalRuleCall_0_1 = (RuleCall)cRefParamOrArgCrossReference_0.eContents().get(1);
		
		//ParamOrArgUse:
		//	ref=[ParamOrArg];
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[ParamOrArg]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[ParamOrArg]
		public CrossReference getRefParamOrArgCrossReference_0() { return cRefParamOrArgCrossReference_0; }
		
		//ID
		public RuleCall getRefParamOrArgIDTerminalRuleCall_0_1() { return cRefParamOrArgIDTerminalRuleCall_0_1; }
	}
	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelationTypeRelationshipTypeParserRuleCall_0_0 = (RuleCall)cRelationTypeAssignment_0.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_1_0 = (CrossReference)cEntityAssignment_1.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cEntityEntityCrossReference_1_0.eContents().get(1);
		
		////ParameterUse:
		////	{ParameterUse} ref=[Parameter|Field]
		////;
		////
		////
		////
		////ArgumentUse:
		////	ref=[Field]
		////;
		//Relationship:
		//	relationType=RelationshipType entity=[Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//relationType=RelationshipType entity=[Entity]
		public Group getGroup() { return cGroup; }
		
		//relationType=RelationshipType
		public Assignment getRelationTypeAssignment_0() { return cRelationTypeAssignment_0; }
		
		//RelationshipType
		public RuleCall getRelationTypeRelationshipTypeParserRuleCall_0_0() { return cRelationTypeRelationshipTypeParserRuleCall_0_0; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_1_0() { return cEntityEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_1_0_1() { return cEntityEntityIDTerminalRuleCall_1_0_1; }
	}
	public class RelationshipTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.RelationshipType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBelongsToAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBelongsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cToKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBelongsToManyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBelongsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cManyKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cHasOneAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHasKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cOneKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cHasManyAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cHasKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cManyKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//RelationshipType:
		//	{BelongsTo} 'belongs' 'to' | {BelongsToMany} 'belongs' 'to' 'many' | {HasOne} 'has' 'one' | {HasMany} 'has' 'many';
		@Override public ParserRule getRule() { return rule; }
		
		//{BelongsTo} 'belongs' 'to' | {BelongsToMany} 'belongs' 'to' 'many' | {HasOne} 'has' 'one' | {HasMany} 'has' 'many'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BelongsTo} 'belongs' 'to'
		public Group getGroup_0() { return cGroup_0; }
		
		//{BelongsTo}
		public Action getBelongsToAction_0_0() { return cBelongsToAction_0_0; }
		
		//'belongs'
		public Keyword getBelongsKeyword_0_1() { return cBelongsKeyword_0_1; }
		
		//'to'
		public Keyword getToKeyword_0_2() { return cToKeyword_0_2; }
		
		//{BelongsToMany} 'belongs' 'to' 'many'
		public Group getGroup_1() { return cGroup_1; }
		
		//{BelongsToMany}
		public Action getBelongsToManyAction_1_0() { return cBelongsToManyAction_1_0; }
		
		//'belongs'
		public Keyword getBelongsKeyword_1_1() { return cBelongsKeyword_1_1; }
		
		//'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//'many'
		public Keyword getManyKeyword_1_3() { return cManyKeyword_1_3; }
		
		//{HasOne} 'has' 'one'
		public Group getGroup_2() { return cGroup_2; }
		
		//{HasOne}
		public Action getHasOneAction_2_0() { return cHasOneAction_2_0; }
		
		//'has'
		public Keyword getHasKeyword_2_1() { return cHasKeyword_2_1; }
		
		//'one'
		public Keyword getOneKeyword_2_2() { return cOneKeyword_2_2; }
		
		//{HasMany} 'has' 'many'
		public Group getGroup_3() { return cGroup_3; }
		
		//{HasMany}
		public Action getHasManyAction_3_0() { return cHasManyAction_3_0; }
		
		//'has'
		public Keyword getHasKeyword_3_1() { return cHasKeyword_3_1; }
		
		//'many'
		public Keyword getManyKeyword_3_2() { return cManyKeyword_3_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////	Expressions
		//Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class EvalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Eval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEvalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEvalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Eval:
		//	{Eval} 'eval' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{Eval} 'eval' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//{Eval}
		public Action getEvalAction_0() { return cEvalAction_0; }
		
		//'eval'
		public Keyword getEvalKeyword_1() { return cEvalKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} '||' right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} '||' right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} '||' right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Equality ({And.left=current} '&&' right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} '&&' right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} '&&' right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Expression:
		//	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=('==' | '!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('==' | '!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	PlusMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusMinus
		public RuleCall getPlusMinusParserRuleCall_0() { return cPlusMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=('>=' | '<=' | '>' | '<')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('>=' | '<=' | '>' | '<')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusMinus
		public RuleCall getRightPlusMinusParserRuleCall_1_2_0() { return cRightPlusMinusParserRuleCall_1_2_0; }
	}
	public class PlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.PlusMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusMinus Expression:
		//	MulDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulDiv
		public RuleCall getMulDivParserRuleCall_0() { return cMulDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulDiv
		public RuleCall getRightMulDivParserRuleCall_1_1_0() { return cRightMulDivParserRuleCall_1_1_0; }
	}
	public class MulDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.MulDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMulLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MulDiv Expression:
		//	Primary (({Mul.left=current} '*' | {Div.left=current} '/') right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({Mul.left=current} '*' | {Div.left=current} '/') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({Mul.left=current} '*' | {Div.left=current} '/') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mul.left=current} '*' | {Div.left=current} '/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mul.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mul.left=current}
		public Action getMulLeftAction_1_0_0_0() { return cMulLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cAtomicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Primary Expression:
		//	'(' Expression ')' | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_1() { return cAtomicParserRuleCall_1; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStrAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cParamOrArgUseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Atomic Expression:
		//	{Num} value=INT | {Str} value=STRING | {Bool} value=('true' | 'false') | ParamOrArgUse;
		@Override public ParserRule getRule() { return rule; }
		
		//{Num} value=INT | {Str} value=STRING | {Bool} value=('true' | 'false') | ParamOrArgUse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Num} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{Num}
		public Action getNumAction_0_0() { return cNumAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{Str} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{Str}
		public Action getStrAction_1_0() { return cStrAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{Bool} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{Bool}
		public Action getBoolAction_2_0() { return cBoolAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//ParamOrArgUse
		public RuleCall getParamOrArgUseParserRuleCall_3() { return cParamOrArgUseParserRuleCall_3; }
	}
	
	
	private final ProjectElements pProject;
	private final PrimaryElementElements pPrimaryElement;
	private final DBConfigElements pDBConfig;
	private final DBDeclElements pDBDecl;
	private final EntityElements pEntity;
	private final EntityDeclElements pEntityDecl;
	private final FieldElements pField;
	private final ValidationCheckElements pValidationCheck;
	private final ValidatorUseElements pValidatorUse;
	private final CheckBlockElements pCheckBlock;
	private final ValidationStatusElements pValidationStatus;
	private final FieldPropElements pFieldProp;
	private final InputTypeElements pInputType;
	private final DataTypeElements pDataType;
	private final ValidatorElements pValidator;
	private final ParameterElements pParameter;
	private final ParamOrArgElements pParamOrArg;
	private final ParamOrArgUseElements pParamOrArgUse;
	private final RelationshipElements pRelationship;
	private final RelationshipTypeElements pRelationshipType;
	private final ExpressionElements pExpression;
	private final EvalElements pEval;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusMinusElements pPlusMinus;
	private final MulDivElements pMulDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CMSdslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProject = new ProjectElements();
		this.pPrimaryElement = new PrimaryElementElements();
		this.pDBConfig = new DBConfigElements();
		this.pDBDecl = new DBDeclElements();
		this.pEntity = new EntityElements();
		this.pEntityDecl = new EntityDeclElements();
		this.pField = new FieldElements();
		this.pValidationCheck = new ValidationCheckElements();
		this.pValidatorUse = new ValidatorUseElements();
		this.pCheckBlock = new CheckBlockElements();
		this.pValidationStatus = new ValidationStatusElements();
		this.pFieldProp = new FieldPropElements();
		this.pInputType = new InputTypeElements();
		this.pDataType = new DataTypeElements();
		this.pValidator = new ValidatorElements();
		this.pParameter = new ParameterElements();
		this.pParamOrArg = new ParamOrArgElements();
		this.pParamOrArgUse = new ParamOrArgUseElements();
		this.pRelationship = new RelationshipElements();
		this.pRelationshipType = new RelationshipTypeElements();
		this.pExpression = new ExpressionElements();
		this.pEval = new EvalElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusMinus = new PlusMinusElements();
		this.pMulDiv = new MulDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jope015.mdsd2021.reexam.CMSdsl.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("jope015.mdsd2021.reexam.CMSdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Project:
	//	'project' name=ID ':' BEGIN
	//	elements+=PrimaryElement*
	//	END;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//PrimaryElement:
	//	DBConfig | Entity | Validator | Eval;
	public PrimaryElementElements getPrimaryElementAccess() {
		return pPrimaryElement;
	}
	
	public ParserRule getPrimaryElementRule() {
		return getPrimaryElementAccess().getRule();
	}
	
	//DBConfig:
	//	{DBConfig} type='database' ':' BEGIN
	//	config+=DBDecl*
	//	END;
	public DBConfigElements getDBConfigAccess() {
		return pDBConfig;
	}
	
	public ParserRule getDBConfigRule() {
		return getDBConfigAccess().getRule();
	}
	
	//DBDecl:
	//	{Lib} type='library' ':' value=STRING | {Host} type='hostname' ':' value=STRING | {Port} type='port' ':' value=INT |
	//	{Dialect} type='dialect' ':' value=STRING | {User} type='username' ':' value=STRING | {Pass} type='password' ':'
	//	value=STRING;
	public DBDeclElements getDBDeclAccess() {
		return pDBDecl;
	}
	
	public ParserRule getDBDeclRule() {
		return getDBDeclAccess().getRule();
	}
	
	//Entity:
	//	{Entity}
	//	'entity' name=ID (relations+=Relationship ('and' relations+=Relationship)*)? ':' BEGIN
	//	members+=EntityDecl*
	//	END;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//EntityDecl:
	//	Field | ValidationCheck;
	public EntityDeclElements getEntityDeclAccess() {
		return pEntityDecl;
	}
	
	public ParserRule getEntityDeclRule() {
		return getEntityDeclAccess().getRule();
	}
	
	//Field:
	//	dontShow?='hide'? 'field' name=ID ':' type=DataType ('=>' BEGIN
	//	properties+=FieldProp*
	//	END)?;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	////ValidationCheck:
	////	'check' (Check | CheckBlock)
	////;
	//ValidationCheck:
	//	'check' validator=ValidatorUse '=>' errrorMsg=STRING;
	public ValidationCheckElements getValidationCheckAccess() {
		return pValidationCheck;
	}
	
	public ParserRule getValidationCheckRule() {
		return getValidationCheckAccess().getRule();
	}
	
	//ValidatorUse:
	//	{ValidatorUse} validator=[Validator] '(' args+=[Field] (',' args+=[Field])* ')';
	public ValidatorUseElements getValidatorUseAccess() {
		return pValidatorUse;
	}
	
	public ParserRule getValidatorUseRule() {
		return getValidatorUseAccess().getRule();
	}
	
	//CheckBlock:
	//	validator=ValidatorUse '=>' BEGIN
	//	statusCond+=ValidationStatus*
	//	END;
	public CheckBlockElements getCheckBlockAccess() {
		return pCheckBlock;
	}
	
	public ParserRule getCheckBlockRule() {
		return getCheckBlockAccess().getRule();
	}
	
	//ValidationStatus:
	//	{Err} 'error' ':' msg=STRING | {Warn} 'warning' ':' msg=STRING | {Succ} 'success' ':' msg=STRING;
	public ValidationStatusElements getValidationStatusAccess() {
		return pValidationStatus;
	}
	
	public ParserRule getValidationStatusRule() {
		return getValidationStatusAccess().getRule();
	}
	
	//FieldProp:
	//	{Def} type='default' ':' value=STRING | {PropTest} type='test' ':' value=STRING | {InputField} type='inputType' ':'
	//	value=InputType
	//	//	{Check} type='check' value=ValidatorUse
	//;
	public FieldPropElements getFieldPropAccess() {
		return pFieldProp;
	}
	
	public ParserRule getFieldPropRule() {
		return getFieldPropAccess().getRule();
	}
	
	//InputType:
	//	{InpMail} type='email' | {InpDate} type='date' | {InpNum} type='number' | {InpPass} type='password' | {InpText}
	//	type='text' | {InpTextArea} type='textarea';
	public InputTypeElements getInputTypeAccess() {
		return pInputType;
	}
	
	public ParserRule getInputTypeRule() {
		return getInputTypeAccess().getRule();
	}
	
	//DataType:
	//	{Str} type='string' | {Dt} type='date' | {Integ} type='int' | {Lng} type='long' | {Bool} type='bool' | {Flt}
	//	type='float';
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Validator:
	//	'validator' name=ID '(' params+=Parameter (',' params+=Parameter)* ')' '=>' BEGIN
	//	comparison=Expression
	//	END;
	public ValidatorElements getValidatorAccess() {
		return pValidator;
	}
	
	public ParserRule getValidatorRule() {
		return getValidatorAccess().getRule();
	}
	
	//Parameter:
	//	name=ID ':' type=DataType;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ParamOrArg:
	//	Parameter | Field;
	public ParamOrArgElements getParamOrArgAccess() {
		return pParamOrArg;
	}
	
	public ParserRule getParamOrArgRule() {
		return getParamOrArgAccess().getRule();
	}
	
	//ParamOrArgUse:
	//	ref=[ParamOrArg];
	public ParamOrArgUseElements getParamOrArgUseAccess() {
		return pParamOrArgUse;
	}
	
	public ParserRule getParamOrArgUseRule() {
		return getParamOrArgUseAccess().getRule();
	}
	
	////ParameterUse:
	////	{ParameterUse} ref=[Parameter|Field]
	////;
	////
	////
	////
	////ArgumentUse:
	////	ref=[Field]
	////;
	//Relationship:
	//	relationType=RelationshipType entity=[Entity];
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}
	
	//RelationshipType:
	//	{BelongsTo} 'belongs' 'to' | {BelongsToMany} 'belongs' 'to' 'many' | {HasOne} 'has' 'one' | {HasMany} 'has' 'many';
	public RelationshipTypeElements getRelationshipTypeAccess() {
		return pRelationshipType;
	}
	
	public ParserRule getRelationshipTypeRule() {
		return getRelationshipTypeAccess().getRule();
	}
	
	////	Expressions
	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Eval:
	//	{Eval} 'eval' expression=Expression;
	public EvalElements getEvalAccess() {
		return pEval;
	}
	
	public ParserRule getEvalRule() {
		return getEvalAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} '||' right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equality ({And.left=current} '&&' right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusMinus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusMinus Expression:
	//	MulDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulDiv)*;
	public PlusMinusElements getPlusMinusAccess() {
		return pPlusMinus;
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}
	
	//MulDiv Expression:
	//	Primary (({Mul.left=current} '*' | {Div.left=current} '/') right=Primary)*;
	public MulDivElements getMulDivAccess() {
		return pMulDiv;
	}
	
	public ParserRule getMulDivRule() {
		return getMulDivAccess().getRule();
	}
	
	//Primary Expression:
	//	'(' Expression ')' | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Expression:
	//	{Num} value=INT | {Str} value=STRING | {Bool} value=('true' | 'false') | ParamOrArgUse;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//terminal BEGIN:
	//	'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//	'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
